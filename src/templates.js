"use strict";
// Template files for the Expo React Native app
Object.defineProperty(exports, "__esModule", { value: true });
exports.screenTemplates = exports.configTemplates = exports.componentTemplates = exports.additionalTemplates = exports.srcTemplates = exports.appTemplates = void 0;
exports.appTemplates = {
    // App layout files
    "app/_layout.tsx": "import { Stack } from \"expo-router\";\nimport { ProviderComponent } from \"@/src/context/providers/ProviderComponent\";\n\nexport default function RootLayout() {\n  return (\n    <ProviderComponent>\n      <Stack screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"(auth)\" options={{ headerShown: false }} />\n        <Stack.Screen name=\"(protected)\" options={{ headerShown: false }} />\n      </Stack>\n    </ProviderComponent>\n  );\n}",
    "app/+not-found.tsx": "import { Link, Stack } from \"expo-router\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: \"Oops!\" }} />\n      <View style={styles.container}>\n        <Text style={styles.title}>This screen doesn't exist.</Text>\n        <Link href=\"/\" style={styles.link}>\n          <Text style={styles.linkText}>Go to home screen!</Text>\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: \"#2e78b7\",\n  },\n});",
    // Auth layout and screens
    "app/(auth)/_layout.tsx": "import { Stack } from \"expo-router\";\n\nexport default function AuthLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"index\" options={{ headerShown: false }} />\n      <Stack.Screen name=\"otp\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}",
    "app/(auth)/index.tsx": "import { SafeAreaScreenComponent } from \"@/src/components/ui\";\nimport { router } from \"expo-router\";\nimport React, { useState } from \"react\";\nimport {\n  Alert,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nexport default function AuthScreen() {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSendOTP = async () => {\n    if (!phoneNumber.trim()) {\n      Alert.alert(\"Error\", \"Please enter your phone number\");\n      return;\n    }\n\n    if (phoneNumber.length < 10) {\n      Alert.alert(\"Error\", \"Please enter a valid phone number\");\n      return;\n    }\n\n    setIsLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsLoading(false);\n      // Navigate to OTP screen with phone number\n      router.push(\"/(auth)/otp\" as any);\n    }, 1000);\n  };\n\n  return (\n    <SafeAreaScreenComponent>\n      <View style={styles.container}>\n        <View style={styles.content}>\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.title}>Enter Your Phone Number</Text>\n            <Text style={styles.subtitle}>\n              We'll send you a verification code to confirm your number\n            </Text>\n          </View>\n\n          {/* Phone Input Form */}\n          <View style={styles.form}>\n            <View style={styles.phoneInputContainer}>\n              <View style={styles.countryCode}>\n                <Text style={styles.countryCodeText}>+1</Text>\n              </View>\n              <TextInput\n                style={styles.phoneInput}\n                placeholder=\"(555) 123-4567\"\n                value={phoneNumber}\n                onChangeText={setPhoneNumber}\n                keyboardType=\"phone-pad\"\n                maxLength={15}\n              />\n            </View>\n\n            <TouchableOpacity \n              style={[styles.button, isLoading && styles.buttonDisabled]} \n              onPress={handleSendOTP}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? \"Sending...\" : \"Send Verification Code\"}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Footer */}\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>\n              By continuing, you agree to our Terms of Service and Privacy Policy\n            </Text>\n          </View>\n        </View>\n      </View>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f8f9fa\",\n  },\n  content: {\n    flex: 1,\n    justifyContent: \"center\",\n    paddingHorizontal: 24,\n  },\n  header: {\n    alignItems: \"center\",\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginBottom: 12,\n    color: \"#333\",\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: \"center\",\n    color: \"#666\",\n    lineHeight: 22,\n  },\n  form: {\n    gap: 20,\n  },\n  phoneInputContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#ddd\",\n    borderRadius: 12,\n    backgroundColor: \"#ffffff\",\n    overflow: \"hidden\",\n  },\n  countryCode: {\n    paddingHorizontal: 16,\n    paddingVertical: 18,\n    backgroundColor: \"#f8f9fa\",\n    borderRightWidth: 1,\n    borderRightColor: \"#ddd\",\n  },\n  countryCodeText: {\n    fontSize: 16,\n    fontWeight: \"600\",\n    color: \"#333\",\n  },\n  phoneInput: {\n    flex: 1,\n    height: 56,\n    paddingHorizontal: 16,\n    fontSize: 16,\n    color: \"#333\",\n  },\n  button: {\n    height: 56,\n    backgroundColor: \"#007AFF\",\n    borderRadius: 12,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 8,\n    shadowColor: \"#007AFF\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  buttonDisabled: {\n    backgroundColor: \"#B0B0B0\",\n    opacity: 0.7,\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"600\",\n  },\n  footer: {\n    marginTop: 40,\n    alignItems: \"center\",\n  },\n  footerText: {\n    fontSize: 14,\n    color: \"#999\",\n    textAlign: \"center\",\n    lineHeight: 20,\n  },\n});",
};
exports.srcTemplates = {
    // Context providers
    "src/context/providers/ProviderComponent.tsx": "import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport React from \"react\";\nimport { AuthProvider } from \"./AuthProvider\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      gcTime: 1000 * 60 * 10, // 10 minutes (formerly cacheTime)\n    },\n  },\n});\n\ninterface ProviderComponentProps {\n  children: React.ReactNode;\n}\n\nexport function ProviderComponent({ children }: ProviderComponentProps) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>{children}</AuthProvider>\n    </QueryClientProvider>\n  );\n}",
    "src/context/providers/AuthProvider.tsx": "import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { router } from 'expo-router';\n// import * as SecureStore from 'expo-secure-store';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  login: (accessToken: string, refreshToken: string) => Promise<void>;\n  logout: () => Promise<void>;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Mock tokens for development - uncomment SecureStore usage when ready\n  const mockAccessToken = \"mock_access_token_123\";\n  const mockRefreshToken = \"mock_refresh_token_456\";\n\n  const checkAuthStatus = async () => {\n    try {\n      setLoading(true);\n      \n      // Commented out SecureStore implementation - uncomment when ready\n      // const accessToken = await SecureStore.getItemAsync('access_token');\n      // const refreshToken = await SecureStore.getItemAsync('refresh_token');\n      \n      // Mock implementation\n      const accessToken = mockAccessToken;\n      const refreshToken = mockRefreshToken;\n      \n      if (accessToken && refreshToken) {\n        setIsAuthenticated(true);\n        router.replace(\"/(protected)/main/home\" as any);\n      } else {\n        setIsAuthenticated(false);\n        router.replace(\"/(auth)\" as any);\n      }\n    } catch (error) {\n      console.error(\"Auth check error:\", error);\n      setIsAuthenticated(false);\n      router.replace(\"/(auth)\" as any);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (accessToken: string, refreshToken: string) => {\n    try {\n      // Commented out SecureStore implementation - uncomment when ready\n      // await SecureStore.setItemAsync('access_token', accessToken);\n      // await SecureStore.setItemAsync('refresh_token', refreshToken);\n      \n      setIsAuthenticated(true);\n      router.replace(\"/(protected)/main/home\" as any);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Commented out SecureStore implementation - uncomment when ready\n      // await SecureStore.deleteItemAsync('access_token');\n      // await SecureStore.deleteItemAsync('refresh_token');\n      \n      setIsAuthenticated(false);\n      router.replace(\"/(auth)\" as any);\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const value: AuthContextType = {\n    isAuthenticated,\n    login,\n    logout,\n    loading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}",
};
// Additional templates that are missing
exports.additionalTemplates = {
    "app/(auth)/otp.tsx": "import { SafeAreaScreenComponent } from \"@/src/components/ui\";\nimport { useAuth } from \"@/src/context/providers/AuthProvider\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { router } from \"expo-router\";\nimport React, { useRef, useState } from \"react\";\nimport {\n  Alert,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nexport default function OtpScreen() {\n  const [otp, setOtp] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const inputRefs = useRef<TextInput[]>([]);\n\n  const handleOtpChange = (value: string, index: number) => {\n    const newOtp = [...otp];\n    newOtp[index] = value;\n    setOtp(newOtp);\n\n    // Auto-focus next input\n    if (value && index < 5) {\n      inputRefs.current[index + 1]?.focus();\n    }\n  };\n\n  const handleKeyPress = (key: string, index: number) => {\n    if (key === \"Backspace\" && !otp[index] && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n    }\n  };\n\n  const handleVerifyOtp = async () => {\n    const otpString = otp.join(\"\");\n\n    if (otpString.length !== 6) {\n      Alert.alert(\"Error\", \"Please enter the complete 6-digit code\");\n      return;\n    }\n\n    setIsLoading(true);\n\n    // Simulate API call\n    setTimeout(async () => {\n      try {\n        // Mock OTP verification - replace with actual API call\n        await login(\"mock_access_token\", \"mock_refresh_token\");\n      } catch (error) {\n        Alert.alert(\"Error\", \"Invalid verification code. Please try again.\");\n      } finally {\n        setIsLoading(false);\n      }\n    }, 1000);\n  };\n\n  const handleResendCode = () => {\n    Alert.alert(\n      \"Code Sent\",\n      \"A new verification code has been sent to your phone.\"\n    );\n  };\n\n  return (\n    <SafeAreaScreenComponent>\n      <View style={styles.container}>\n        <View style={styles.content}>\n          {/* Header */}\n          <View style={styles.header}>\n            <TouchableOpacity\n              style={styles.backButton}\n              onPress={() => router.back()}\n            >\n              <Ionicons name=\"arrow-back\" size={24} color=\"#333\" />\n            </TouchableOpacity>\n            <Text style={styles.title}>Verify Your Phone</Text>\n            <Text style={styles.subtitle}>\n              Enter the 6-digit code sent to your phone number\n            </Text>\n          </View>\n\n          {/* OTP Input */}\n          <View style={styles.form}>\n            <View style={styles.otpContainer}>\n              {otp.map((digit, index) => (\n                <TextInput\n                  key={index}\n                  ref={(ref) => {\n                    if (ref) inputRefs.current[index] = ref;\n                  }}\n                  style={[\n                    styles.otpInput,\n                    digit ? styles.otpInputFilled : null,\n                  ]}\n                  value={digit}\n                  onChangeText={(value) => handleOtpChange(value, index)}\n                  onKeyPress={({ nativeEvent }) =>\n                    handleKeyPress(nativeEvent.key, index)\n                  }\n                  keyboardType=\"numeric\"\n                  maxLength={1}\n                  textAlign=\"center\"\n                />\n              ))}\n            </View>\n\n            <TouchableOpacity\n              style={[styles.button, isLoading && styles.buttonDisabled]}\n              onPress={handleVerifyOtp}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? \"Verifying...\" : \"Verify Code\"}\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.resendButton}\n              onPress={handleResendCode}\n            >\n              <Text style={styles.resendText}>\n                Didn't receive the code?{\" \"}\n                <Text style={styles.resendLink}>Resend</Text>\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f8f9fa\",\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n    paddingTop: 60,\n  },\n  header: {\n    alignItems: \"center\",\n    marginBottom: 40,\n  },\n  backButton: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    padding: 8,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginBottom: 12,\n    color: \"#333\",\n    marginTop: 40,\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: \"center\",\n    color: \"#666\",\n    lineHeight: 22,\n  },\n  form: {\n    gap: 24,\n  },\n  otpContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: 20,\n  },\n  otpInput: {\n    width: 50,\n    height: 60,\n    borderWidth: 2,\n    borderColor: \"#e0e0e0\",\n    borderRadius: 12,\n    fontSize: 24,\n    fontWeight: \"600\",\n    backgroundColor: \"#ffffff\",\n    color: \"#333\",\n  },\n  otpInputFilled: {\n    borderColor: \"#007AFF\",\n    backgroundColor: \"#f0f8ff\",\n  },\n  button: {\n    height: 56,\n    backgroundColor: \"#007AFF\",\n    borderRadius: 12,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    shadowColor: \"#007AFF\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  buttonDisabled: {\n    backgroundColor: \"#B0B0B0\",\n    opacity: 0.7,\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"600\",\n  },\n  resendButton: {\n    marginTop: 20,\n    alignItems: \"center\",\n    padding: 12,\n  },\n  resendText: {\n    fontSize: 16,\n    color: \"#666\",\n  },\n  resendLink: {\n    color: \"#007AFF\",\n    fontWeight: \"600\",\n  },\n});",
    // Protected layout
    "app/(protected)/_layout.tsx": "import { Stack } from \"expo-router\";\n\nexport default function ProtectedLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"main\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}",
    // Main tab layout
    "app/(protected)/main/_layout.tsx": "import { Ionicons } from \"@expo/vector-icons\";\nimport { Tabs } from \"expo-router\";\nimport React from \"react\";\nimport { Platform } from \"react-native\";\n\nexport default function MainLayout() {\n  return (\n    <Tabs\n      screenOptions={{\n        headerShown: false,\n        tabBarActiveTintColor: \"#007AFF\",\n        tabBarInactiveTintColor: \"#8E8E93\",\n        tabBarStyle: {\n          backgroundColor: \"#FFFFFF\",\n          borderTopWidth: 1,\n          borderTopColor: \"#E5E5EA\",\n          paddingBottom: Platform.OS === \"ios\" ? 20 : 10,\n          paddingTop: 10,\n          height: Platform.OS === \"ios\" ? 90 : 70,\n          shadowColor: \"#000\",\n          shadowOffset: {\n            width: 0,\n            height: -2,\n          },\n          shadowOpacity: 0.1,\n          shadowRadius: 4,\n          elevation: 8,\n        },\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: \"600\",\n          marginTop: 4,\n        },\n        tabBarIconStyle: {\n          marginBottom: 2,\n        },\n      }}\n    >\n      <Tabs.Screen\n        name=\"home\"\n        options={{\n          title: \"Home\",\n          tabBarIcon: ({ color, size, focused }) => (\n            <Ionicons\n              name={focused ? \"home\" : \"home-outline\"}\n              size={size}\n              color={color}\n            />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"explore\"\n        options={{\n          title: \"Explore\",\n          tabBarIcon: ({ color, size, focused }) => (\n            <Ionicons\n              name={focused ? \"compass\" : \"compass-outline\"}\n              size={size}\n              color={color}\n            />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: \"Profile\",\n          tabBarIcon: ({ color, size, focused }) => (\n            <Ionicons\n              name={focused ? \"person\" : \"person-outline\"}\n              size={size}\n              color={color}\n            />\n          ),\n        }}\n      />\n    </Tabs>\n  );\n}",
};
// Additional templates for components and screens
exports.componentTemplates = {
    "src/components/ui/SafeAreaScreenComponent.tsx": "import React from 'react';\nimport { View, StyleSheet, ViewStyle } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\ninterface SafeAreaScreenComponentProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n  backgroundColor?: string;\n  edges?: ('top' | 'right' | 'bottom' | 'left')[];\n}\n\nexport function SafeAreaScreenComponent({\n  children,\n  style,\n  backgroundColor = '#ffffff',\n  edges = ['top', 'bottom', 'left', 'right']\n}: SafeAreaScreenComponentProps) {\n  return (\n    <SafeAreaView\n      style={[\n        styles.container,\n        { backgroundColor },\n        style\n      ]}\n      edges={edges}\n    >\n      <View style={styles.content}>\n        {children}\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});",
    "src/components/ui/index.ts": "// UI Components barrel exports\nexport { SafeAreaScreenComponent } from \"./SafeAreaScreenComponent\";",
};
// Configuration templates
exports.configTemplates = {
    "app.json": "{\n  \"expo\": {\n    \"name\": \"EmirApp\",\n    \"slug\": \"emirapp\",\n    \"version\": \"1.0.0\",\n    \"orientation\": \"portrait\",\n    \"icon\": \"./assets/icon.png\",\n    \"userInterfaceStyle\": \"light\",\n    \"splash\": {\n      \"image\": \"./assets/splash.png\",\n      \"resizeMode\": \"contain\",\n      \"backgroundColor\": \"#ffffff\"\n    },\n    \"assetBundlePatterns\": [\n      \"**/*\"\n    ],\n    \"ios\": {\n      \"supportsTablet\": true\n    },\n    \"android\": {\n      \"adaptiveIcon\": {\n        \"foregroundImage\": \"./assets/adaptive-icon.png\",\n        \"backgroundColor\": \"#ffffff\"\n      }\n    },\n    \"web\": {\n      \"favicon\": \"./assets/favicon.png\",\n      \"bundler\": \"metro\"\n    },\n    \"scheme\": \"emirapp\",\n    \"plugins\": [\n      \"expo-router\"\n    ],\n    \"experiments\": {\n      \"typedRoutes\": true\n    }\n  }\n}",
    "metro.config.js": "const { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;",
    "babel.config.js": "module.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['expo-router/babel'],\n  };\n};",
};
// Screen templates
exports.screenTemplates = {
    "app/(protected)/main/home/_layout.tsx": "import { Stack } from \"expo-router\";\n\nexport default function HomeLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"index\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}",
    "app/(protected)/main/home/index.tsx": "import { SafeAreaScreenComponent } from \"@/src/components/ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { router } from \"expo-router\";\nimport React from \"react\";\nimport {\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nexport default function HomeScreen() {\n  const handleProductPress = (id: string) => {\n    // Navigate to product details - implement when needed\n    console.log(\"Product pressed:\", id);\n  };\n\n  return (\n    <SafeAreaScreenComponent>\n      <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n        <View style={styles.content}>\n          {/* Welcome Header */}\n          <View style={styles.welcomeHeader}>\n            <View>\n              <Text style={styles.welcomeText}>Welcome back!</Text>\n              <Text style={styles.subtitle}>Discover amazing products</Text>\n            </View>\n            <Ionicons name=\"notifications-outline\" size={24} color=\"#333\" />\n          </View>\n\n          <View style={styles.productGrid}>\n            {[1, 2, 3, 4, 5, 6].map((id) => (\n              <TouchableOpacity\n                key={id}\n                style={styles.productCard}\n                onPress={() => handleProductPress(id.toString())}\n              >\n                <Text style={styles.productTitle}>Product {id}</Text>\n                <Text style={styles.productDescription}>\n                  Amazing product description here\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    padding: 24,\n  },\n  welcomeHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 24,\n    marginTop: 10,\n  },\n  welcomeText: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#333\",\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: \"#666\",\n    marginBottom: 16,\n  },\n  productGrid: {\n    gap: 12,\n  },\n  productCard: {\n    backgroundColor: \"#f9f9f9\",\n    padding: 20,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#e0e0e0\",\n  },\n  productTitle: {\n    fontSize: 18,\n    fontWeight: \"600\",\n    marginBottom: 4,\n    color: \"#333\",\n  },\n  productDescription: {\n    fontSize: 14,\n    color: \"#666\",\n  },\n});",
    "app/(protected)/main/explore/_layout.tsx": "import { Stack } from \"expo-router\";\n\nexport default function ExploreLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"index\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}",
    "app/(protected)/main/explore/index.tsx": "import { SafeAreaScreenComponent } from \"@/src/components/ui\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport {\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nexport default function ExploreScreen() {\n  const categories = [\n    {\n      id: \"1\",\n      name: \"Electronics\",\n      count: 245,\n      icon: \"phone-portrait-outline\",\n    },\n    { id: \"2\", name: \"Fashion\", count: 189, icon: \"shirt-outline\" },\n    { id: \"3\", name: \"Home & Garden\", count: 156, icon: \"home-outline\" },\n    { id: \"4\", name: \"Sports\", count: 98, icon: \"fitness-outline\" },\n    { id: \"5\", name: \"Books\", count: 234, icon: \"book-outline\" },\n    { id: \"6\", name: \"Health\", count: 67, icon: \"medical-outline\" },\n  ];\n\n  const handleCategoryPress = (categoryId: string) => {\n    // For now, just show an alert since we don't have category pages\n    alert(`Category ${categoryId} selected`);\n  };\n\n  return (\n    <SafeAreaScreenComponent>\n      <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n        <View style={styles.content}>\n          {/* Explore Header */}\n          <View style={styles.exploreHeader}>\n            <View>\n              <Text style={styles.title}>Explore</Text>\n              <Text style={styles.subtitle}>Discover new categories</Text>\n            </View>\n            <Ionicons name=\"search-outline\" size={24} color=\"#333\" />\n          </View>\n\n          <View style={styles.categoryGrid}>\n            {categories.map((category) => (\n              <TouchableOpacity\n                key={category.id}\n                style={styles.categoryCard}\n                onPress={() => handleCategoryPress(category.id)}\n                activeOpacity={0.7}\n              >\n                <View style={styles.categoryIconContainer}>\n                  <Ionicons\n                    name={category.icon as any}\n                    size={32}\n                    color=\"#007AFF\"\n                  />\n                </View>\n                <Text style={styles.categoryName}>{category.name}</Text>\n                <Text style={styles.categoryCount}>{category.count} items</Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    padding: 24,\n  },\n  exploreHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 24,\n    marginTop: 10,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#333\",\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: \"#666\",\n    marginBottom: 16,\n  },\n  categoryGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 12,\n  },\n  categoryCard: {\n    width: \"48%\",\n    backgroundColor: \"#ffffff\",\n    padding: 20,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#e0e0e0\",\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  categoryIconContainer: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: \"#f0f8ff\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 12,\n  },\n  categoryName: {\n    fontSize: 16,\n    fontWeight: \"600\",\n    marginBottom: 4,\n    color: \"#333\",\n    textAlign: \"center\",\n  },\n  categoryCount: {\n    fontSize: 12,\n    color: \"#666\",\n  },\n});",
    "app/(protected)/main/profile.tsx": "import { SafeAreaScreenComponent } from \"@/src/components/ui\";\nimport { useAuth } from \"@/src/context/providers/AuthProvider\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport React, { useState } from \"react\";\nimport {\n  ActivityIndicator,\n  Alert,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\ninterface ProfileOption {\n  id: string;\n  title: string;\n  subtitle: string;\n  icon: keyof typeof Ionicons.glyphMap;\n  action?: () => void;\n}\n\ninterface UserProfile {\n  name: string;\n  email: string;\n  initials: string;\n  memberSince: string;\n}\n\nexport default function ProfileScreen() {\n  const { logout, loading } = useAuth();\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n\n  // Mock user data - in a real app, this would come from your user context or API\n  const userProfile: UserProfile = {\n    name: \"John Doe\",\n    email: \"john.doe@example.com\",\n    initials: \"JD\",\n    memberSince: \"January 2024\",\n  };\n\n  const handleLogout = async () => {\n    Alert.alert(\"Sign Out\", \"Are you sure you want to sign out?\", [\n      {\n        text: \"Cancel\",\n        style: \"cancel\",\n      },\n      {\n        text: \"Sign Out\",\n        style: \"destructive\",\n        onPress: async () => {\n          try {\n            setIsLoggingOut(true);\n            await logout();\n          } catch (error) {\n            console.error(\"Logout error:\", error);\n            Alert.alert(\"Error\", \"Failed to sign out. Please try again.\");\n          } finally {\n            setIsLoggingOut(false);\n          }\n        },\n      },\n    ]);\n  };\n\n  const profileOptions: ProfileOption[] = [\n    {\n      id: \"1\",\n      title: \"Edit Profile\",\n      subtitle: \"Update your information\",\n      icon: \"person-outline\",\n      action: () =>\n        Alert.alert(\n          \"Coming Soon\",\n          \"Edit profile feature will be available soon!\"\n        ),\n    },\n    {\n      id: \"2\",\n      title: \"Order History\",\n      subtitle: \"View your past orders\",\n      icon: \"receipt-outline\",\n      action: () =>\n        Alert.alert(\n          \"Coming Soon\",\n          \"Order history feature will be available soon!\"\n        ),\n    },\n    {\n      id: \"3\",\n      title: \"Notifications\",\n      subtitle: \"Manage notifications\",\n      icon: \"notifications-outline\",\n      action: () =>\n        Alert.alert(\n          \"Coming Soon\",\n          \"Notification settings will be available soon!\"\n        ),\n    },\n    {\n      id: \"4\",\n      title: \"Privacy Settings\",\n      subtitle: \"Control your privacy\",\n      icon: \"shield-outline\",\n      action: () =>\n        Alert.alert(\"Coming Soon\", \"Privacy settings will be available soon!\"),\n    },\n    {\n      id: \"5\",\n      title: \"Help & Support\",\n      subtitle: \"Get help or contact us\",\n      icon: \"help-circle-outline\",\n      action: () =>\n        Alert.alert(\"Help & Support\", \"Contact us at support@example.com\"),\n    },\n    {\n      id: \"6\",\n      title: \"About\",\n      subtitle: \"App version and info\",\n      icon: \"information-circle-outline\",\n      action: () =>\n        Alert.alert(\n          \"About\",\n          \"App Version 1.0.0\\nBuilt with React Native & Expo\"\n        ),\n    },\n  ];\n\n  if (loading) {\n    return (\n      <SafeAreaScreenComponent>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color=\"#007AFF\" />\n          <Text style={styles.loadingText}>Loading...</Text>\n        </View>\n      </SafeAreaScreenComponent>\n    );\n  }\n\n  return (\n    <SafeAreaScreenComponent>\n      <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n        <View style={styles.content}>\n          {/* Profile Info */}\n          <View style={styles.profileInfo}>\n            <View style={styles.avatar}>\n              <Text style={styles.avatarText}>{userProfile.initials}</Text>\n            </View>\n            <Text style={styles.userName}>{userProfile.name}</Text>\n            <Text style={styles.userEmail}>{userProfile.email}</Text>\n            <Text style={styles.memberSince}>\n              Member since {userProfile.memberSince}\n            </Text>\n          </View>\n\n          {/* Profile Options */}\n          <View style={styles.optionsContainer}>\n            {profileOptions.map((option) => (\n              <TouchableOpacity\n                key={option.id}\n                style={styles.optionCard}\n                onPress={option.action}\n                activeOpacity={0.7}\n              >\n                <View style={styles.optionLeft}>\n                  <View style={styles.iconContainer}>\n                    <Ionicons name={option.icon} size={24} color=\"#007AFF\" />\n                  </View>\n                  <View style={styles.optionContent}>\n                    <Text style={styles.optionTitle}>{option.title}</Text>\n                    <Text style={styles.optionSubtitle}>{option.subtitle}</Text>\n                  </View>\n                </View>\n                <Ionicons name=\"chevron-forward\" size={20} color=\"#C7C7CC\" />\n              </TouchableOpacity>\n            ))}\n          </View>\n\n          {/* Logout Button */}\n          <TouchableOpacity\n            style={[\n              styles.logoutButton,\n              isLoggingOut && styles.logoutButtonDisabled,\n            ]}\n            onPress={handleLogout}\n            disabled={isLoggingOut}\n            activeOpacity={0.8}\n          >\n            {isLoggingOut ? (\n              <ActivityIndicator size=\"small\" color=\"white\" />\n            ) : (\n              <>\n                <Ionicons name=\"log-out-outline\" size={20} color=\"white\" />\n                <Text style={styles.logoutText}>Sign Out</Text>\n              </>\n            )}\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 24,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: \"#666\",\n  },\n  content: {\n    padding: 24,\n  },\n  profileInfo: {\n    alignItems: \"center\",\n    marginBottom: 32,\n    marginTop: 20,\n  },\n  avatar: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: \"#007AFF\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 16,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  avatarText: {\n    color: \"white\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n  },\n  userName: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    color: \"#333\",\n    marginBottom: 4,\n  },\n  userEmail: {\n    fontSize: 16,\n    color: \"#666\",\n    marginBottom: 8,\n  },\n  memberSince: {\n    fontSize: 14,\n    color: \"#999\",\n    fontStyle: \"italic\",\n  },\n  optionsContainer: {\n    gap: 12,\n    marginBottom: 32,\n  },\n  optionCard: {\n    backgroundColor: \"#ffffff\",\n    padding: 20,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#e0e0e0\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  optionLeft: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  iconContainer: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: \"#f0f8ff\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginRight: 16,\n  },\n  optionContent: {\n    flex: 1,\n  },\n  optionTitle: {\n    fontSize: 16,\n    fontWeight: \"600\",\n    color: \"#333\",\n    marginBottom: 4,\n  },\n  optionSubtitle: {\n    fontSize: 14,\n    color: \"#666\",\n  },\n  logoutButton: {\n    backgroundColor: \"#ff4444\",\n    paddingVertical: 16,\n    paddingHorizontal: 24,\n    borderRadius: 12,\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    gap: 8,\n    shadowColor: \"#ff4444\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  logoutButtonDisabled: {\n    backgroundColor: \"#ff8888\",\n    opacity: 0.7,\n  },\n  logoutText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"600\",\n  },\n});",
};
