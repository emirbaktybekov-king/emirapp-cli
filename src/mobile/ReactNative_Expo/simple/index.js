"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactNativeExpoSimpleDependencies = exports.reactNativeExpoSimpleTemplates = void 0;
// React Native Expo Simple Template
exports.reactNativeExpoSimpleTemplates = {
    // App layout files
    "app/_layout.tsx": "import { Stack } from \"expo-router\";\nimport { ProviderComponent } from \"../src/context/providers/ProviderComponent\";\n\nexport default function RootLayout() {\n  return (\n    <ProviderComponent>\n      <Stack screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"(auth)\" options={{ headerShown: false }} />\n        <Stack.Screen name=\"(protected)\" options={{ headerShown: false }} />\n      </Stack>\n    </ProviderComponent>\n  );\n}",
    "app/+not-found.tsx": "import { Link, Stack } from \"expo-router\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: \"Oops!\" }} />\n      <View style={styles.container}>\n        <Text style={styles.title}>This screen doesn't exist.</Text>\n        <Link href=\"/\" style={styles.link}>\n          <Text style={styles.linkText}>Go to home screen!</Text>\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: \"#2e78b7\",\n  },\n});",
    // Auth layout and screens
    "app/(auth)/_layout.tsx": "import { Stack } from \"expo-router\";\n\nexport default function AuthLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"index\" options={{ headerShown: false }} />\n      <Stack.Screen name=\"otp\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}",
    "app/(auth)/index.tsx": "import { SafeAreaScreenComponent } from \"../../src/components/ui\";\nimport { router } from \"expo-router\";\nimport React, { useState } from \"react\";\nimport {\n  Alert,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nexport default function AuthScreen() {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSendOTP = async () => {\n    if (!phoneNumber.trim()) {\n      Alert.alert(\"Error\", \"Please enter your phone number\");\n      return;\n    }\n\n    if (phoneNumber.length < 10) {\n      Alert.alert(\"Error\", \"Please enter a valid phone number\");\n      return;\n    }\n\n    setIsLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsLoading(false);\n      // Navigate to OTP screen with phone number\n      router.push(\"/(auth)/otp\" as any);\n    }, 1000);\n  };\n\n  return (\n    <SafeAreaScreenComponent>\n      <View style={styles.container}>\n        <View style={styles.content}>\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.title}>Enter Your Phone Number</Text>\n            <Text style={styles.subtitle}>\n              We'll send you a verification code to confirm your number\n            </Text>\n          </View>\n\n          {/* Phone Input Form */}\n          <View style={styles.form}>\n            <View style={styles.phoneInputContainer}>\n              <View style={styles.countryCode}>\n                <Text style={styles.countryCodeText}>+1</Text>\n              </View>\n              <TextInput\n                style={styles.phoneInput}\n                placeholder=\"(555) 123-4567\"\n                value={phoneNumber}\n                onChangeText={setPhoneNumber}\n                keyboardType=\"phone-pad\"\n                maxLength={15}\n              />\n            </View>\n\n            <TouchableOpacity \n              style={[styles.button, isLoading && styles.buttonDisabled]} \n              onPress={handleSendOTP}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? \"Sending...\" : \"Send Verification Code\"}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Footer */}\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>\n              By continuing, you agree to our Terms of Service and Privacy Policy\n            </Text>\n          </View>\n        </View>\n      </View>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f8f9fa\",\n  },\n  content: {\n    flex: 1,\n    justifyContent: \"center\",\n    paddingHorizontal: 24,\n  },\n  header: {\n    alignItems: \"center\",\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginBottom: 12,\n    color: \"#333\",\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: \"center\",\n    color: \"#666\",\n    lineHeight: 22,\n  },\n  form: {\n    gap: 20,\n  },\n  phoneInputContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#ddd\",\n    borderRadius: 12,\n    backgroundColor: \"#ffffff\",\n    overflow: \"hidden\",\n  },\n  countryCode: {\n    paddingHorizontal: 16,\n    paddingVertical: 18,\n    backgroundColor: \"#f8f9fa\",\n    borderRightWidth: 1,\n    borderRightColor: \"#ddd\",\n  },\n  countryCodeText: {\n    fontSize: 16,\n    fontWeight: \"600\",\n    color: \"#333\",\n  },\n  phoneInput: {\n    flex: 1,\n    height: 56,\n    paddingHorizontal: 16,\n    fontSize: 16,\n    color: \"#333\",\n  },\n  button: {\n    height: 56,\n    backgroundColor: \"#007AFF\",\n    borderRadius: 12,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 8,\n    shadowColor: \"#007AFF\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  buttonDisabled: {\n    backgroundColor: \"#B0B0B0\",\n    opacity: 0.7,\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"600\",\n  },\n  footer: {\n    marginTop: 40,\n    alignItems: \"center\",\n  },\n  footerText: {\n    fontSize: 14,\n    color: \"#999\",\n    textAlign: \"center\",\n    lineHeight: 20,\n  },\n});",
    "app/(auth)/otp.tsx": "import { SafeAreaScreenComponent } from \"../../src/components/ui\";\nimport { useAuth } from \"../../src/context/providers/AuthProvider\";\nimport { router } from \"expo-router\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport {\n  Alert,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nexport default function OTPScreen() {\n  const [otp, setOtp] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { verifyOTP } = useAuth();\n  const inputRefs = useRef<TextInput[]>([]);\n\n  const handleOtpChange = (value: string, index: number) => {\n    const newOtp = [...otp];\n    newOtp[index] = value;\n    setOtp(newOtp);\n\n    // Auto-focus next input\n    if (value && index < 5) {\n      inputRefs.current[index + 1]?.focus();\n    }\n  };\n\n  const handleKeyPress = (key: string, index: number) => {\n    if (key === 'Backspace' && !otp[index] && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n    }\n  };\n\n  const handleVerifyOTP = async () => {\n    const otpString = otp.join(\"\");\n\n    if (otpString.length !== 6) {\n      Alert.alert(\"Error\", \"Please enter the complete verification code\");\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const isValid = await verifyOTP(otpString);\n\n      if (isValid) {\n        router.replace(\"/(protected)\" as any);\n      } else {\n        Alert.alert(\"Error\", \"Invalid verification code. Please try again.\");\n        setOtp([\"\", \"\", \"\", \"\", \"\", \"\"]);\n        inputRefs.current[0]?.focus();\n      }\n    } catch (error) {\n      Alert.alert(\"Error\", \"Something went wrong. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResendOTP = () => {\n    Alert.alert(\"Code Sent\", \"A new verification code has been sent to your phone.\");\n  };\n\n  useEffect(() => {\n    inputRefs.current[0]?.focus();\n  }, []);\n\n  return (\n    <SafeAreaScreenComponent>\n      <View style={styles.container}>\n        <View style={styles.content}>\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.title}>Enter Verification Code</Text>\n            <Text style={styles.subtitle}>\n              We've sent a 6-digit code to your phone number\n            </Text>\n          </View>\n\n          {/* OTP Input */}\n          <View style={styles.otpContainer}>\n            {otp.map((digit, index) => (\n              <TextInput\n                key={index}\n                ref={(ref) => {\n                  if (ref) inputRefs.current[index] = ref;\n                }}\n                style={[\n                  styles.otpInput,\n                  digit ? styles.otpInputFilled : null,\n                ]}\n                value={digit}\n                onChangeText={(value) => handleOtpChange(value, index)}\n                onKeyPress={({ nativeEvent }) => handleKeyPress(nativeEvent.key, index)}\n                keyboardType=\"numeric\"\n                maxLength={1}\n                selectTextOnFocus\n              />\n            ))}\n          </View>\n\n          {/* Verify Button */}\n          <TouchableOpacity\n            style={[styles.button, isLoading && styles.buttonDisabled]}\n            onPress={handleVerifyOTP}\n            disabled={isLoading}\n          >\n            <Text style={styles.buttonText}>\n              {isLoading ? \"Verifying...\" : \"Verify Code\"}\n            </Text>\n          </TouchableOpacity>\n\n          {/* Resend Code */}\n          <TouchableOpacity style={styles.resendButton} onPress={handleResendOTP}>\n            <Text style={styles.resendText}>Didn't receive the code? Resend</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f8f9fa\",\n  },\n  content: {\n    flex: 1,\n    justifyContent: \"center\",\n    paddingHorizontal: 24,\n  },\n  header: {\n    alignItems: \"center\",\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginBottom: 12,\n    color: \"#333\",\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: \"center\",\n    color: \"#666\",\n    lineHeight: 22,\n  },\n  otpContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: 30,\n    paddingHorizontal: 20,\n  },\n  otpInput: {\n    width: 45,\n    height: 56,\n    borderWidth: 1,\n    borderColor: \"#ddd\",\n    borderRadius: 12,\n    backgroundColor: \"#ffffff\",\n    textAlign: \"center\",\n    fontSize: 20,\n    fontWeight: \"600\",\n    color: \"#333\",\n  },\n  otpInputFilled: {\n    borderColor: \"#007AFF\",\n    backgroundColor: \"#f0f8ff\",\n  },\n  button: {\n    height: 56,\n    backgroundColor: \"#007AFF\",\n    borderRadius: 12,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 20,\n    shadowColor: \"#007AFF\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  buttonDisabled: {\n    backgroundColor: \"#B0B0B0\",\n    opacity: 0.7,\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"600\",\n  },\n  resendButton: {\n    alignItems: \"center\",\n    paddingVertical: 12,\n  },\n  resendText: {\n    fontSize: 16,\n    color: \"#007AFF\",\n    fontWeight: \"500\",\n  },\n});",
    // Protected routes
    "app/(protected)/_layout.tsx": "import { Stack } from \"expo-router\";\n\nexport default function ProtectedLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"index\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}",
    "app/(protected)/index.tsx": "import { SafeAreaScreenComponent } from \"../../src/components/ui\";\nimport { useAuth } from \"../../src/context/providers/AuthProvider\";\nimport React from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nexport default function HomeScreen() {\n  const { user, logout } = useAuth();\n\n  const handleLogout = async () => {\n    await logout();\n  };\n\n  return (\n    <SafeAreaScreenComponent>\n      <View style={styles.container}>\n        <View style={styles.content}>\n          <Text style={styles.title}>Welcome!</Text>\n          <Text style={styles.subtitle}>\n            You're successfully logged in with {user?.phoneNumber}\n          </Text>\n\n          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n            <Text style={styles.logoutButtonText}>Logout</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </SafeAreaScreenComponent>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f8f9fa\",\n  },\n  content: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingHorizontal: 24,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginBottom: 12,\n    color: \"#333\",\n  },\n  subtitle: {\n    fontSize: 18,\n    textAlign: \"center\",\n    color: \"#666\",\n    lineHeight: 24,\n    marginBottom: 40,\n  },\n  logoutButton: {\n    paddingHorizontal: 32,\n    paddingVertical: 16,\n    backgroundColor: \"#ff4444\",\n    borderRadius: 12,\n  },\n  logoutButtonText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n});",
    // Add missing component files
    "src/components/ui/index.ts": "// UI Components barrel export\nexport { SafeAreaScreenComponent } from './SafeAreaScreenComponent';",
    "src/components/index.ts": "// Components barrel export\nexport * from './ui';",
    "src/components/ui/SafeAreaScreenComponent.tsx": "import React from 'react';\nimport { SafeAreaView, StatusBar, StyleSheet } from 'react-native';\n\ninterface SafeAreaScreenComponentProps {\n  children: React.ReactNode;\n  backgroundColor?: string;\n}\n\nexport const SafeAreaScreenComponent: React.FC<SafeAreaScreenComponentProps> = ({\n  children,\n  backgroundColor = '#ffffff'\n}) => {\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor }]}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor={backgroundColor} />\n      {children}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});",
    "src/context/providers/index.ts": "// Providers barrel export\nexport { ProviderComponent } from './ProviderComponent';\nexport { AuthProvider, useAuth } from './AuthProvider';",
    "src/context/index.ts": "// Context barrel export\nexport * from './providers';",
    "src/index.ts": "// Main barrel export\nexport * from './components';\nexport * from './context';",
    "src/context/providers/ProviderComponent.tsx": "import React from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AuthProvider } from './AuthProvider';\n\ninterface ProviderComponentProps {\n  children: React.ReactNode;\n}\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 2,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n    },\n  },\n});\n\nexport const ProviderComponent: React.FC<ProviderComponentProps> = ({ children }) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        {children}\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n};",
    "src/context/providers/AuthProvider.tsx": "import React, { createContext, useContext, useEffect, useState } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface User {\n  id: string;\n  phoneNumber: string;\n  isVerified: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (phoneNumber: string) => Promise<void>;\n  logout: () => Promise<void>;\n  verifyOTP: (otp: string) => Promise<boolean>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuthState();\n  }, []);\n\n  const checkAuthState = async () => {\n    try {\n      const userData = await AsyncStorage.getItem('user');\n      if (userData) {\n        setUser(JSON.parse(userData));\n      }\n    } catch (error) {\n      console.error('Error checking auth state:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (phoneNumber: string) => {\n    try {\n      const newUser: User = {\n        id: Date.now().toString(),\n        phoneNumber,\n        isVerified: false,\n      };\n\n      await AsyncStorage.setItem('user', JSON.stringify(newUser));\n      setUser(newUser);\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  };\n\n  const verifyOTP = async (otp: string): Promise<boolean> => {\n    try {\n      // Simulate OTP verification\n      if (otp === '123456') {\n        if (user) {\n          const verifiedUser = { ...user, isVerified: true };\n          await AsyncStorage.setItem('user', JSON.stringify(verifiedUser));\n          setUser(verifiedUser);\n        }\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error verifying OTP:', error);\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await AsyncStorage.removeItem('user');\n      setUser(null);\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated: user?.isVerified ?? false,\n    login,\n    logout,\n    verifyOTP,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};",
    // Configuration files
    "tsconfig.json": "{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}",
    "app.json": "{\n  \"expo\": {\n    \"name\": \"Simple Auth App\",\n    \"slug\": \"simple-auth-app\",\n    \"version\": \"1.0.0\",\n    \"orientation\": \"portrait\",\n    \"icon\": \"./assets/icon.png\",\n    \"userInterfaceStyle\": \"light\",\n    \"splash\": {\n      \"image\": \"./assets/splash.png\",\n      \"resizeMode\": \"contain\",\n      \"backgroundColor\": \"#ffffff\"\n    },\n    \"assetBundlePatterns\": [\n      \"**/*\"\n    ],\n    \"ios\": {\n      \"supportsTablet\": true\n    },\n    \"android\": {\n      \"adaptiveIcon\": {\n        \"foregroundImage\": \"./assets/adaptive-icon.png\",\n        \"backgroundColor\": \"#ffffff\"\n      }\n    },\n    \"web\": {\n      \"favicon\": \"./assets/favicon.png\",\n      \"bundler\": \"metro\"\n    },\n    \"plugins\": [\n      \"expo-router\"\n    ],\n    \"scheme\": \"simple-auth-app\"\n  }\n}",
};
exports.reactNativeExpoSimpleDependencies = [
    "@expo/vector-icons",
    "@react-native-async-storage/async-storage",
    "@react-navigation/bottom-tabs",
    "@react-navigation/elements",
    "@react-navigation/native",
    "@tanstack/react-query",
    "react-native-gesture-handler",
    "react-native-reanimated",
    "react-native-safe-area-context",
    "react-native-screens",
    "react-native-toast-message",
];
